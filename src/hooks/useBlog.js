import { useState, useMemo } from 'react'

export const useBlog = () => {
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('')
  const [selectedPost, setSelectedPost] = useState(null)

  // Sample blog posts data
  const posts = [
    {
      id: 1,
      title: "React 18: Novas Funcionalidades e Concurrent Features",
      excerpt: "Explore as principais novidades do React 18, incluindo Concurrent Rendering, Suspense melhorado e as novas APIs que revolucionam o desenvolvimento frontend.",
      content: `React 18 trouxe mudan√ßas significativas que transformam a forma como desenvolvemos aplica√ß√µes web. Neste artigo, vamos explorar as principais funcionalidades.

## Concurrent Rendering

O Concurrent Rendering √© uma das maiores inova√ß√µes do React 18. Ele permite que o React interrompa, pause e retome o trabalho de renderiza√ß√£o conforme necess√°rio.

### Benef√≠cios do Concurrent Rendering:
- Melhor responsividade da interface
- Prioriza√ß√£o inteligente de atualiza√ß√µes
- Renderiza√ß√£o n√£o-bloqueante

## Suspense para Data Fetching

O Suspense agora suporta data fetching de forma nativa, permitindo uma experi√™ncia de carregamento mais fluida.

\`\`\`jsx
function ProfilePage() {
  return (
    <Suspense fallback={<ProfileSkeleton />}>
      <ProfileDetails />
      <ProfileTimeline />
    </Suspense>
  )
}
\`\`\`

## Automatic Batching

O React 18 introduz o batching autom√°tico para todas as atualiza√ß√µes, n√£o apenas para event handlers.

### Antes do React 18:
- Apenas event handlers eram batchados
- Promises, timeouts n√£o eram batchados

### Com React 18:
- Todas as atualiza√ß√µes s√£o batchadas automaticamente
- Melhor performance por padr√£o

## Novas APIs

### startTransition
Permite marcar atualiza√ß√µes como n√£o urgentes:

\`\`\`jsx
import { startTransition } from 'react'

function handleClick() {
  // Urgente: mostrar o que foi digitado
  setInputValue(input)
  
  // N√£o urgente: mostrar os resultados
  startTransition(() => {
    setSearchQuery(input)
  })
}
\`\`\`

### useDeferredValue
Hook para diferir valores n√£o cr√≠ticos:

\`\`\`jsx
function SearchResults({ query }) {
  const deferredQuery = useDeferredValue(query)
  const results = useMemo(() => 
    searchData(deferredQuery), [deferredQuery]
  )
  
  return <div>{results}</div>
}
\`\`\`

## Migra√ß√£o para React 18

A migra√ß√£o √© relativamente simples:

1. Atualize para React 18
2. Use createRoot ao inv√©s de ReactDOM.render
3. Teste suas aplica√ß√µes
4. Adote gradualmente as novas features

## Conclus√£o

React 18 representa um grande avan√ßo na biblioteca, focando em performance e experi√™ncia do usu√°rio. As novas funcionalidades permitem criar aplica√ß√µes mais responsivas e eficientes.`,
      author: "Fabio Ferreira",
      date: "2024-01-15",
      category: "Frontend",
      icon: "‚öõÔ∏è",
      tags: ["React", "JavaScript", "Frontend", "Performance"],
      views: 1250
    },
    {
      id: 2,
      title: "Node.js e Express: Construindo APIs RESTful Modernas",
      excerpt: "Aprenda a criar APIs robustas e escal√°veis usando Node.js e Express, com foco em boas pr√°ticas, seguran√ßa e performance.",
      content: `Construir APIs RESTful eficientes √© fundamental no desenvolvimento moderno. Vamos explorar como criar APIs robustas com Node.js e Express.

## Configura√ß√£o Inicial

Primeiro, vamos configurar nosso projeto:

\`\`\`bash
npm init -y
npm install express cors helmet morgan dotenv
npm install -D nodemon
\`\`\`

## Estrutura do Projeto

Uma boa estrutura √© essencial:

\`\`\`
src/
‚îú‚îÄ‚îÄ controllers/
‚îú‚îÄ‚îÄ middleware/
‚îú‚îÄ‚îÄ models/
‚îú‚îÄ‚îÄ routes/
‚îú‚îÄ‚îÄ utils/
‚îî‚îÄ‚îÄ app.js
\`\`\`

## Configura√ß√£o B√°sica do Express

\`\`\`javascript
const express = require('express')
const cors = require('cors')
const helmet = require('helmet')
const morgan = require('morgan')

const app = express()

// Middleware de seguran√ßa
app.use(helmet())
app.use(cors())
app.use(morgan('combined'))
app.use(express.json({ limit: '10mb' }))
app.use(express.urlencoded({ extended: true }))

module.exports = app
\`\`\`

## Criando Rotas RESTful

### Estrutura de Rotas
\`\`\`javascript
const express = require('express')
const router = express.Router()

// GET /api/users
router.get('/', getAllUsers)

// GET /api/users/:id
router.get('/:id', getUserById)

// POST /api/users
router.post('/', createUser)

// PUT /api/users/:id
router.put('/:id', updateUser)

// DELETE /api/users/:id
router.delete('/:id', deleteUser)

module.exports = router
\`\`\`

## Controllers

Separar a l√≥gica em controllers:

\`\`\`javascript
const User = require('../models/User')

const getAllUsers = async (req, res) => {
  try {
    const users = await User.find()
    res.json({
      success: true,
      data: users
    })
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message
    })
  }
}

const createUser = async (req, res) => {
  try {
    const user = new User(req.body)
    await user.save()
    
    res.status(201).json({
      success: true,
      data: user
    })
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message
    })
  }
}
\`\`\`

## Middleware de Valida√ß√£o

\`\`\`javascript
const validateUser = (req, res, next) => {
  const { name, email } = req.body
  
  if (!name || !email) {
    return res.status(400).json({
      success: false,
      message: 'Nome e email s√£o obrigat√≥rios'
    })
  }
  
  next()
}
\`\`\`

## Tratamento de Erros

\`\`\`javascript
const errorHandler = (err, req, res, next) => {
  console.error(err.stack)
  
  res.status(err.status || 500).json({
    success: false,
    message: err.message || 'Erro interno do servidor'
  })
}

app.use(errorHandler)
\`\`\`

## Boas Pr√°ticas

### 1. Versionamento de API
\`\`\`javascript
app.use('/api/v1/users', userRoutes)
\`\`\`

### 2. Rate Limiting
\`\`\`javascript
const rateLimit = require('express-rate-limit')

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 100 // m√°ximo 100 requests por IP
})

app.use(limiter)
\`\`\`

### 3. Valida√ß√£o com Joi
\`\`\`javascript
const Joi = require('joi')

const userSchema = Joi.object({
  name: Joi.string().min(2).max(50).required(),
  email: Joi.string().email().required(),
  age: Joi.number().min(18).max(120)
})
\`\`\`

## Conclus√£o

Criar APIs RESTful robustas requer aten√ß√£o a detalhes como estrutura, seguran√ßa e performance. Seguindo essas pr√°ticas, voc√™ ter√° APIs escal√°veis e maint√≠veis.`,
      author: "Fabio Ferreira",
      date: "2024-01-12",
      category: "Backend",
      icon: "üöÄ",
      tags: ["Node.js", "Express", "API", "Backend"],
      views: 980
    },
    {
      id: 3,
      title: "Docker e Kubernetes: Containeriza√ß√£o para Desenvolvedores",
      excerpt: "Guia completo sobre containeriza√ß√£o com Docker e orquestra√ß√£o com Kubernetes, desde conceitos b√°sicos at√© deploy em produ√ß√£o.",
      content: `Containeriza√ß√£o revolucionou o desenvolvimento e deploy de aplica√ß√µes. Vamos explorar Docker e Kubernetes de forma pr√°tica.

## O que √© Docker?

Docker √© uma plataforma que permite empacotar aplica√ß√µes em containers - ambientes isolados e port√°veis.

### Vantagens do Docker:
- Consist√™ncia entre ambientes
- Isolamento de depend√™ncias
- Facilidade de deploy
- Escalabilidade

## Dockerfile B√°sico

\`\`\`dockerfile
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

EXPOSE 3000

USER node

CMD ["npm", "start"]
\`\`\`

## Docker Compose

Para aplica√ß√µes multi-container:

\`\`\`yaml
version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - db
      - redis

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

volumes:
  postgres_data:
\`\`\`

## Introdu√ß√£o ao Kubernetes

Kubernetes orquestra containers em escala, fornecendo:
- Auto-scaling
- Load balancing
- Self-healing
- Rolling updates

## Deployment Kubernetes

\`\`\`yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: myapp:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
\`\`\`

## Service Kubernetes

\`\`\`yaml
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  selector:
    app: myapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: LoadBalancer
\`\`\`

## ConfigMap e Secrets

### ConfigMap para configura√ß√µes:
\`\`\`yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: myapp-config
data:
  database_url: "postgresql://localhost:5432/myapp"
  redis_url: "redis://localhost:6379"
\`\`\`

### Secret para dados sens√≠veis:
\`\`\`yaml
apiVersion: v1
kind: Secret
metadata:
  name: myapp-secrets
type: Opaque
data:
  db_password: cGFzc3dvcmQ=  # base64 encoded
  api_key: YWJjZGVmZ2g=      # base64 encoded
\`\`\`

## Boas Pr√°ticas

### 1. Multi-stage Builds
\`\`\`dockerfile
# Build stage
FROM node:18 AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

# Production stage
FROM node:18-alpine
WORKDIR /app
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
CMD ["node", "dist/index.js"]
\`\`\`

### 2. Health Checks
\`\`\`yaml
livenessProbe:
  httpGet:
    path: /health
    port: 3000
  initialDelaySeconds: 30
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /ready
    port: 3000
  initialDelaySeconds: 5
  periodSeconds: 5
\`\`\`

### 3. Resource Limits
Sempre defina limits e requests para CPU e mem√≥ria.

## Monitoramento

Use ferramentas como:
- Prometheus para m√©tricas
- Grafana para visualiza√ß√£o
- Jaeger para tracing

## Conclus√£o

Docker e Kubernetes s√£o essenciais no desenvolvimento moderno. Dominar essas tecnologias permite criar aplica√ß√µes mais robustas e escal√°veis.`,
      author: "Fabio Ferreira",
      date: "2024-01-10",
      category: "DevOps",
      icon: "üê≥",
      tags: ["Docker", "Kubernetes", "DevOps", "Containers"],
      views: 1100
    },
    {
      id: 4,
      title: "React Native vs Flutter: Qual Escolher em 2024?",
      excerpt: "Compara√ß√£o detalhada entre React Native e Flutter, analisando performance, produtividade, ecossistema e casos de uso ideais.",
      content: `A escolha entre React Native e Flutter √© uma das decis√µes mais importantes no desenvolvimento mobile. Vamos analisar ambas as tecnologias.

## React Native

### Vantagens:
- Compartilhamento de c√≥digo com React web
- Grande comunidade e ecossistema
- Hot reload para desenvolvimento r√°pido
- Suporte nativo do Facebook/Meta

### Desvantagens:
- Performance inferior ao nativo
- Depend√™ncia de bridges
- Fragmenta√ß√£o de vers√µes

## Flutter

### Vantagens:
- Performance pr√≥xima ao nativo
- UI consistente entre plataformas
- Hot reload extremamente r√°pido
- Suporte oficial do Google

### Desvantagens:
- Linguagem Dart menos popular
- Tamanho do app maior
- Ecossistema menor

## Compara√ß√£o T√©cnica

### Performance
Flutter geralmente oferece melhor performance devido ao seu engine customizado.

### Desenvolvimento
React Native pode ser mais r√°pido para equipes que j√° conhecem React.

### UI/UX
Flutter oferece mais controle sobre a interface, enquanto React Native usa componentes nativos.

## Casos de Uso

### Escolha React Native quando:
- Equipe j√° conhece React
- Precisa integrar com apps existentes
- Or√ßamento limitado para aprendizado

### Escolha Flutter quando:
- Performance √© cr√≠tica
- Precisa de UI altamente customizada
- Quer consist√™ncia visual total

## Conclus√£o

Ambas s√£o excelentes op√ß√µes. A escolha depende do contexto do projeto, equipe e requisitos espec√≠ficos.`,
      author: "Fabio Ferreira",
      date: "2024-01-08",
      category: "Mobile",
      icon: "üì±",
      tags: ["React Native", "Flutter", "Mobile", "Compara√ß√£o"],
      views: 850
    },
    {
      id: 5,
      title: "Machine Learning com Python: Primeiros Passos",
      excerpt: "Introdu√ß√£o pr√°tica ao Machine Learning usando Python, pandas, scikit-learn e as principais t√©cnicas de an√°lise de dados.",
      content: `Machine Learning est√° transformando a tecnologia. Vamos come√ßar nossa jornada com Python e as principais bibliotecas.

## Configura√ß√£o do Ambiente

\`\`\`bash
pip install pandas numpy scikit-learn matplotlib seaborn jupyter
\`\`\`

## Carregando e Explorando Dados

\`\`\`python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Carregando dados
df = pd.read_csv('dataset.csv')

# Explorando os dados
print(df.head())
print(df.info())
print(df.describe())
\`\`\`

## Pr√©-processamento

### Limpeza de Dados
\`\`\`python
# Removendo valores nulos
df = df.dropna()

# Ou preenchendo com m√©dia
df['coluna'].fillna(df['coluna'].mean(), inplace=True)
\`\`\`

### Encoding de Vari√°veis Categ√≥ricas
\`\`\`python
from sklearn.preprocessing import LabelEncoder, OneHotEncoder

# Label Encoding
le = LabelEncoder()
df['categoria_encoded'] = le.fit_transform(df['categoria'])

# One-Hot Encoding
df_encoded = pd.get_dummies(df, columns=['categoria'])
\`\`\`

## Primeiro Modelo: Regress√£o Linear

\`\`\`python
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Preparando dados
X = df[['feature1', 'feature2', 'feature3']]
y = df['target']

# Dividindo em treino e teste
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Treinando modelo
model = LinearRegression()
model.fit(X_train, y_train)

# Fazendo predi√ß√µes
y_pred = model.predict(X_test)

# Avaliando
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'MSE: {mse}')
print(f'R¬≤: {r2}')
\`\`\`

## Classifica√ß√£o com Random Forest

\`\`\`python
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Modelo de classifica√ß√£o
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Predi√ß√µes
y_pred = clf.predict(X_test)

# Avalia√ß√£o
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
\`\`\`

## Valida√ß√£o Cruzada

\`\`\`python
from sklearn.model_selection import cross_val_score

# Valida√ß√£o cruzada
scores = cross_val_score(clf, X, y, cv=5)
print(f'Accuracy: {scores.mean():.2f} (+/- {scores.std() * 2:.2f})')
\`\`\`

## Visualiza√ß√£o de Resultados

\`\`\`python
# Matriz de confus√£o
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d')
plt.title('Matriz de Confus√£o')
plt.show()

# Import√¢ncia das features
feature_importance = pd.DataFrame({
    'feature': X.columns,
    'importance': clf.feature_importances_
}).sort_values('importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(data=feature_importance, x='importance', y='feature')
plt.title('Import√¢ncia das Features')
plt.show()
\`\`\`

## Pr√≥ximos Passos

1. Experimente diferentes algoritmos
2. Fa√ßa feature engineering
3. Use t√©cnicas de ensemble
4. Implemente deep learning com TensorFlow/PyTorch

## Conclus√£o

Machine Learning com Python √© acess√≠vel e poderoso. Com pr√°tica e experimenta√ß√£o, voc√™ pode resolver problemas complexos e gerar insights valiosos.`,
      author: "Fabio Ferreira",
      date: "2024-01-05",
      category: "AI/ML",
      icon: "ü§ñ",
      tags: ["Python", "Machine Learning", "Data Science", "AI"],
      views: 1300
    },
    {
      id: 6,
      title: "Web3 e Blockchain: O Futuro da Internet Descentralizada",
      excerpt: "Explore o mundo Web3, smart contracts, DeFi e como a blockchain est√° revolucionando a internet e criando novas oportunidades.",
      content: `Web3 representa a pr√≥xima evolu√ß√£o da internet, baseada em descentraliza√ß√£o, propriedade digital e novas formas de intera√ß√£o online.

## O que √© Web3?

Web3 √© a terceira gera√ß√£o da internet, caracterizada por:
- Descentraliza√ß√£o
- Propriedade de dados pelo usu√°rio
- Economia de tokens
- Interoperabilidade

## Blockchain Fundamentals

### Conceitos B√°sicos:
- Blocos e hashes
- Consenso distribu√≠do
- Imutabilidade
- Transpar√™ncia

### Principais Blockchains:
- Ethereum: Smart contracts
- Bitcoin: Store of value
- Solana: High performance
- Polygon: Layer 2 scaling

## Smart Contracts

Contratos auto-execut√°veis na blockchain:

\`\`\`solidity
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    event DataStored(uint256 data);
    
    function set(uint256 x) public {
        storedData = x;
        emit DataStored(x);
    }
    
    function get() public view returns (uint256) {
        return storedData;
    }
}
\`\`\`

## DeFi (Finan√ßas Descentralizadas)

### Principais Protocolos:
- Uniswap: DEX (exchange descentralizada)
- Compound: Lending/borrowing
- MakerDAO: Stablecoin DAI
- Aave: Liquidity protocol

### Vantagens do DeFi:
- Sem intermedi√°rios
- Acesso global
- Transpar√™ncia total
- Composabilidade

## NFTs (Non-Fungible Tokens)

Tokens √∫nicos que representam propriedade digital:

### Casos de Uso:
- Arte digital
- Colecion√°veis
- Gaming items
- Certificados
- Identidade digital

## Desenvolvimento Web3

### Stack Tecnol√≥gico:
- Frontend: React/Next.js
- Blockchain: Ethereum/Solana
- Wallet: MetaMask/WalletConnect
- Storage: IPFS
- Indexing: The Graph

### Exemplo com ethers.js:
\`\`\`javascript
import { ethers } from 'ethers'

// Conectar com MetaMask
const provider = new ethers.providers.Web3Provider(window.ethereum)
const signer = provider.getSigner()

// Interagir com contrato
const contract = new ethers.Contract(address, abi, signer)
const result = await contract.someFunction()
\`\`\`

## DAOs (Organiza√ß√µes Aut√¥nomas Descentralizadas)

Organiza√ß√µes governadas por smart contracts:

### Caracter√≠sticas:
- Governan√ßa descentralizada
- Vota√ß√£o on-chain
- Transpar√™ncia total
- Execu√ß√£o autom√°tica

## Desafios do Web3

### T√©cnicos:
- Escalabilidade
- UX complexa
- Gas fees altos
- Interoperabilidade

### Regulat√≥rios:
- Incerteza legal
- Compliance
- Tributa√ß√£o

## Oportunidades

### Para Desenvolvedores:
- Novos modelos de neg√≥cio
- Economia de tokens
- Comunidades globais
- Inova√ß√£o constante

### Para Usu√°rios:
- Propriedade de dados
- Novos investimentos
- Participa√ß√£o em governan√ßa
- Acesso global a servi√ßos

## Ferramentas Essenciais

### Desenvolvimento:
- Hardhat/Truffle: Development framework
- Remix: Online IDE
- OpenZeppelin: Security libraries
- Alchemy/Infura: Node providers

### An√°lise:
- Etherscan: Block explorer
- DeFiPulse: DeFi analytics
- Dune Analytics: Custom queries

## Futuro do Web3

### Tend√™ncias:
- Layer 2 solutions
- Cross-chain bridges
- Better UX
- Mainstream adoption
- Regulatory clarity

## Conclus√£o

Web3 est√° redefinindo a internet, criando novas oportunidades e desafios. Para desenvolvedores, √© uma √°rea em crescimento exponencial com potencial transformador.`,
      author: "Fabio Ferreira",
      date: "2024-01-03",
      category: "Web3",
      icon: "üîó",
      tags: ["Web3", "Blockchain", "DeFi", "Smart Contracts"],
      views: 750
    }
  ]

  const categories = [
    'Frontend', 'Backend', 'DevOps', 'Mobile', 'AI/ML', 'Web3', 
    'Tutorial', 'Carreira', 'Ferramentas', 'Tend√™ncias'
  ]

  // Filter posts based on search term and category
  const filteredPosts = useMemo(() => {
    return posts.filter(post => {
      const matchesSearch = searchTerm === '' || 
        post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        post.excerpt.toLowerCase().includes(searchTerm.toLowerCase()) ||
        post.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
        post.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))

      const matchesCategory = selectedCategory === '' || post.category === selectedCategory

      return matchesSearch && matchesCategory
    })
  }, [posts, searchTerm, selectedCategory])

  return {
    posts,
    categories,
    searchTerm,
    selectedCategory,
    selectedPost,
    setSearchTerm,
    setSelectedCategory,
    setSelectedPost,
    filteredPosts
  }
}
